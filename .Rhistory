y
b2
plot(x,y)
library(ISLR)
Auto
summary(auto)
summary(Auto)
linear = lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
linear
lm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
glm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
summary(Auto)
summary(linear)
linear = lm(mpg ~ horsepower + weight + year, data = Auto)
summary(linear)
linear = lm(mpg ~ weight + acceleration + year, data = Auto)
summary(linear)
cv
library(boot)
linear = glm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
cv.glm(Auto, linear)
err = cv.glm(Auto, linear)
summary(err)
err$delta
anova(linear)
anova(linear,linear)
linear = glm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
square = glm(mpg ~ poly(horsepower, 2, raw = TRUE) + poly(weight, 2, raw = TRUE) + poly(year, 2, raw = TRUE), data = Auto)
anova(linear,square)
linear = glm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
square = glm(mpg ~ poly(cylinders, 2, raw = TRUE) + poly(displacement, 2, raw = TRUE) + poly(acceleration, 2, raw = TRUE) + poly(horsepower, 2, raw = TRUE) + poly(weight, 2, raw = TRUE) + poly(year, 2, raw = TRUE), data = Auto)
anova(linear,square)
cv.glm(Auto, linear)$delta[1]
cv.glm(Auto, square)$delta[1]
square
square
summary(square)
square = glm(mpg ~ poly(acceleration, 2, raw = TRUE) + poly(horsepower, 2, raw = TRUE) + poly(weight, 2, raw = TRUE) + poly(year, 2, raw = TRUE), data = Auto)
cv.glm(Auto, square)$delta[1]
summary(square)
square = glm(mpg ~ poly(acceleration, 2, raw = TRUE) + poly(weight, 2, raw = TRUE) + poly(year, 2, raw = TRUE), data = Auto)
cv.glm(Auto, square)$delta[1]
summary(square)
plot(linear)
plot(Auto$year, Auto$mpg)
plot(Auto$weight, Auto$mpg)
summary(linear)
plot(Auto$acceleration, Auto$mpg)
square = glm(mpg ~ poly(weight, 2, raw = TRUE) + poly(year, 1, raw = TRUE), data = Auto)
cv.glm(Auto, square)$delta[1]
cv.glm(Auto, linear)$delta[1]
library(ISLR)
library(boot)
linear = glm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
square = glm(mpg ~ poly(acceleration, 2, raw = TRUE) + poly(horsepower, 2, raw = TRUE) + poly(weight, 2, raw = TRUE) + poly(year, 2, raw = TRUE), data = Auto)
cv.glm(Auto, linear)$delta[1]
cv.glm(Auto, square)$delta[1]
lm.fit = glm(nox ~ poly(dis, 3, raw = TRUE), data = Boston)
library(ISLR)
lm.fit = glm(nox ~ poly(dis, 3, raw = TRUE), data = Boston)
library(MASS)
lm.fit = glm(nox ~ poly(dis, 3, raw = TRUE), data = Boston)
summary(lm.fit)
lm.fit
lm.fit = lm(nox ~ poly(dis, 3, raw = TRUE), data = Boston)
summary(lm.fit)
plot(Boston$dis, Boston$nox)
abline(lm.fit)
pred = predict(lm.fit, Boston$dis)
pred = predict(lm.fit, data.fram(Boston$dis))
pred = predict(lm.fit, data.frame(Boston$dis))
pred = predict(lm.fit, Boston)
abline(pred)
abline(pred)
lines(Boston$dis, predict(lm.fit))
plot(Boston$dis, Boston$nox)
lines(Boston$dis, predict(lm.fit))
preds = predict(lm.fit, newdata = list(Boston$dis = dis.grid))
dis.lim = range(Boston$dis)
dis.grid = seq(from = dis.lim[1], to = dis.lim[2])
preds = predict(lm.fit, newdata = list(Boston$dis = dis.grid))
preds = predict(lm.fit, newdata = list(Boston$dis))
preds = predict(lm.fit, newdata = list(Boston))
preds = predict(lm.fit, newdata = Boston)
preds = predict(lm.fit, newdata = list(Boston$dis == dis.grid))
preds = predict(lm.fit, newdata = data.frame(Boston$dis == dis.grid))
preds = predict(lm.fit, newdata = data.frame(Boston["dis"] == dis.grid))
lines(dis.grid, preds$fit, lwd=2, col="blue")
preds
lines(dis.grid, preds, lwd=2, col="blue")
plot(Boston$dis, Boston$nox)
dis.lim = range(Boston$dis)
dis.grid = seq(from = dis.lim[1], to = dis.lim[2])
preds = predict(lm.fit, newdata = data.frame(Boston["dis"] == dis.grid))
lines(dis.grid, preds, lwd=2, col="blue")
lm.fit = lm(nox ~ poly(dis, 3, raw = TRUE), data = Boston)
summary(lm.fit)
plot(Boston$dis, Boston$nox)
dis.lim = range(Boston$dis)
dis.grid = seq(from = dis.lim[1], to = dis.lim[2])
preds = predict(lm.fit, newdata = data.frame(Boston["dis"] == dis.grid), se = TRUE)
lines(dis.grid, preds, lwd=2, col="blue")
preds$fit
preds = predict(lm.fit, newdata = data.frame(Boston["dis"]), se = TRUE)
lines(Boston$dis, preds$fit, lwd=2, col="blue")
summary(preds$fit)
lines(Boston$dis, preds$fit, lwd=1, col="blue")
preds = predict(lm.fit, newdata = data.frame(Boston["dis"]), se = TRUE)
lines(Boston$dis, preds$fit, lwd=1, col="blue")
plot(Boston$dis, Boston$nox)
dis.lim = range(Boston$dis)
dis.grid = seq(from = dis.lim[1], to = dis.lim[2])
preds = predict(lm.fit, newdata = data.frame(Boston["dis"]), se = TRUE)
lines(Boston$dis, preds$fit, lwd=1, col="blue")
preds = predict(lm.fit, newdata = data.frame(Boston["dis"]=dis.grid), se = TRUE)
preds$fit
Boston$dis
lines(dis.grid, preds$fit, col="blue")
dis.grid
lm.fit = lm(nox ~ poly(dis, 3, raw = TRUE), data = Boston)
summary(lm.fit)
plot(Boston$dis, Boston$nox)
preds = predict(lm.fit, newdata = data.frame(Boston["dis"]))
lines(dis.grid, preds, col="blue")
lines(Boston$dis, preds, col="blue")
preds
plot(Boston$dis, preds)
lines(Boston$dis, preds)
lines(Boston$dis, preds, col="blue", type = l)
dis.lims = range(Boston$dis)
dis.grid = seq(from = dis.lims[1], to = dis.lims[2], by = .1)
dis.grid
dis.grid = data.frame(seq(from = dis.lims[1], to = dis.lims[2], by = .1))
dis.grid
names(dis.grid)
names(dis.grid)[1] = "dis"
dis.grid
dis.lims = range(Boston$dis)
dis.grid = data.frame(seq(from = dis.lims[1], to = dis.lims[2], by = .1))
names(dis.grid)[1] = "dis"
preds = predict(lm.fit, newdata = dis.grid)
lines(Boston$dis, preds, col="blue")
lm.fit = lm(nox ~ poly(dis, 3, raw = TRUE), data = Boston)
summary(lm.fit)
plot(Boston$dis, Boston$nox)
dis.lims = range(Boston$dis)
dis.grid = data.frame(seq(from = dis.lims[1], to = dis.lims[2], by = .1))
names(dis.grid)[1] = "dis"
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid, preds, col="blue")
preds
dis.grid
preds
dis.grid
preds
length(dis.grid)
lines(dis.grid$dis, preds, col="blue")
lines(dis.grid$dis, preds, lwd = 2, col="blue")
lines(dis.grid$dis, preds, lwd = 3, col="blue")
lines(dis.grid$dis, preds, lwd = 4, col="blue")
plot(type = n)
plot(type = "n")
plot(Boston$dis, Boston$nox, type = "n")
lm.fit
summary(lm.fit)
x = summary(lm.fit)
lm.fit
lm.fit$residuals
lm.fit$residuals^2
sum(lm.fit$residuals^2)
plot(Boston$dis, Boston$nox, type = "n")
for (i in 1:10) {
lm.fit = lm(nox ~ poly(dis, i, raw = TRUE), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds)
}
plot(Boston$dis, Boston$nox, type = "n")
for (i in 1:10) {
lm.fit = lm(nox ~ poly(dis, i, raw = TRUE), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i)
}
legend(legend = 1:10)
legend("topright", legend = 1:10)
legend("topright", legend = 1:10, col = 1:10)
plot(Boston$dis, Boston$nox, type = "n")
for (i in 1:10) {
lm.fit = lm(nox ~ poly(dis, i, raw = TRUE), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i)
}
legend("topright", legend = 1:10, col = 1:10)
legend("topright", legend = 1:10, col = 1:10, pch = 1)
legend("topright", legend = 1:10, col = 1:10, pch = "--")
legend("top", legend = 1:10, col = 1:10, pch = "-")
legend("top", legend = 1:10, col = 1:10, pch = "-", cex = .5)
plot(Boston$dis, Boston$nox, type = "n")
for (i in 1:10) {
lm.fit = lm(nox ~ poly(dis, i, raw = TRUE), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i)
}
legend("topright", legend = 1:10, col = 1:10, pch = "-", cex = .4)
legend("topright", legend = 1:10, col = 1:10, pch = "-", cex = .4, horiz = TRUE)
plot(Boston$dis, Boston$nox, type = "n")
for (i in 1:10) {
lm.fit = lm(nox ~ poly(dis, i, raw = TRUE), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i)
}
legend("topright", legend = 1:10, col = 1:10, pch = "-", cex = .7, horiz = TRUE)
for (i in 1:10) {
lm.fit = glm(nox ~ poly(dis, i, raw = TRUE), data = Boston)
error = cv.glm(Boston, lm.fit)$delta[1]
print(sprintf("degree %d: CV Error = %f", i, error))
}
plot(Boston$dis, Boston$nox)
bs(Boston$dis, df = 4)
attr(bs(Boston$dis, df = 4), "knots")
library(splines)
lm.fit = glm(nox ~ bs(dis, df = 4))
plot(Boston$dis, Boston$dis)
lm.fit = glm(nox ~ bs(dis, df = 4), data = Boston)
plot(Boston$dis, Boston$nox)
pred = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = "blue")
lines(dis.grid$dis, preds, lwd = 4, col = "blue")
plot(Boston$dis, Boston$nox, type = "n")
for (i in 3:7) {
lm.fit = glm(nox ~ bs(dis, df = i), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
pred = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i)
}
legend("topright", legend = 3:7, col = 3:7, pch = "-")
for (i in 3:6) {
lm.fit = glm(nox ~ bs(dis, df = i), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
pred = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i)
}
plot(Boston$dis, Boston$nox, type = "n")
for (i in 3:7) {
lm.fit = glm(nox ~ bs(dis, df = i), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i)
}
legend("topright", legend = 3:7, col = 3:7, pch = "-")
plot(Boston$dis, Boston$nox, type = "n")
for (i in 3:7) {
lm.fit = glm(nox ~ bs(dis, df = i), data = Boston)
print(sprintf("degree %d: RSS = %f", i, sum(lm.fit$residuals^2)))
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, col = i-1)
}
legend("topright", legend = 3:7, col = 1:5, pch = "-")
for (i in 3:7) {
lm.fit = glm(nox ~ bs(dis, df = i), data = Boston)
error = cv.glm(Boston, lm.fit)$delta[1]
print(sprintf("degree %d: CV Error = %f", i, error))
}
warnings()
lm.fit = glm(nox ~ bs(dis, df = 7), data = Boston)
plot(Boston$dis, Boston$nox)
preds = predict(lm.fit, newdata = dis.grid)
lines(dis.grid$dis, preds, lwd = 4, col = "blue")
set.seed(1)
x1 = rnorm(100)
x2 = rnorm(100)
e = rnorm(100)
y = rep(1, 100) + x1 + x2 + e
thy
y
a = y - b1*x1
x1
b1
b1
b1 = 0
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
b2
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
b1
a = y - b1*x1 - b2*x2
b0 = lm(a)
lm(a)
lm(a ~ )
b1 = lm(a ~ x1)
b1
b1$coef
b1$coef[1]
B0 = vector()
B1 = vector()
B2 = vector()
for (i in 1:1000) {
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0[i] = lm(a ~ x1)$coef[1]
B1[i] = b1
B2[i] = b2
}
B0 = vector()
B1 = vector()
B2 = vector()
b1 = 0
for (i in 1:1000) {
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0[i] = lm(a ~ x1)$coef[1]
B1[i] = b1
B2[i] = b2
}
points(1:1000, B1)
plot(1:1000, B0)
points(1:1000, B1)
b1 = 0
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0 = vector()
B1 = vector()
B2 = vector()
for (i in 1:1000) {
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0[i] = lm(a ~ x1)$coef[1]
B1[i] = b1
B2[i] = b2
}
plot(1:1000, B0)
B0
plot(1:1000, B0)
plot(1:1000, B0)
B0
points(1:1000, B1)
B1
B2
b1 = 0
```
#### c)
```{r}
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
```
#### d)
```{r}
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
```
#### e)
```{r}
B0 = vector()
B1 = vector()
B2 = vector()
for (i in 1:1000) {
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
print(b2)
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0[i] = lm(a ~ x1)$coef[1]
B1[i] = b1
B2[i] = b2
}
B2
set.seed(1)
x1 = rnorm(100)
x2 = rnorm(100)
e = rnorm(100)
y = rep(10, 100) + 20*x1 + 30*x2 + e
```
#### b)
```{r}
b1 = 0
```
#### c)
```{r}
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
```
#### d)
```{r}
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
```
#### e)
```{r}
B0 = vector()
B1 = vector()
B2 = vector()
for (i in 1:1000) {
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
print(b2)
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0[i] = lm(a ~ x1)$coef[1]
B1[i] = b1
B2[i] = b2
}
plot(1:1000, B0)
plot(1:1000, B1)
plot(1:1000, B2)
set.seed(1)
x1 = rnorm(100)
x2 = rnorm(100)
e = rnorm(100)
y = rep(1, 100) + 2*x1 - 2*x2 + e
```
#### b)
```{r}
b1 = 0
```
#### c)
```{r}
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
```
#### d)
```{r}
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
```
#### e)
```{r}
B0 = vector()
B1 = vector()
B2 = vector()
for (i in 1:1000) {
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
print(b2)
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0[i] = lm(a ~ x1)$coef[1]
B1[i] = b1
B2[i] = b2
}
plot(1:1000, B0)
plot(1:1000, B1)
plot(1:1000, B2)
B0 = vector()
B1 = vector()
B2 = vector()
b1 = 0
for (i in 1:1000) {
a = y - b1*x1
b2 = lm(a ~ x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
B0[i] = lm(a ~ x1)$coef[1]
B1[i] = b1
B2[i] = b2
}
plot(1:1000, B0)
plot(1:1000, B1)
plot(1:1000, B2)
```
plot(1:1000, B0, ylim = c(-3,3))
points(1:1000, B1)
plot(1:1000, B0, ylim = c(-3,3), col = 1)
points(1:1000, B1, col = 2)
points(1:1000, B2, col = 3)
legend(legend = c(b0, b1, b2), col = 1:3, pch = 1)
legend(legend = c("b0", "b1", "b2"), col = 1:3, pch = 1)
legend("bottomright", legend = c("b0", "b1", "b2"), col = 1:3, pch = 1)
abline(1:1000, rep(lm.fit$coef[1]))
abline(1:1000, rep(lm.fit$coef[1], 1000))
lm.fit = lm(y ~ x1 + x2)
abline(1:1000, rep(lm.fit$coef[1], 1000))
lm.fit$coef[1]
abline(h = lm.fit$coef)
abline(h = lm.fit$coef, col = 4, lwd = 3)
plot(Auto$weight, Auto$mpg)
linear = glm(mpg ~ cylinders + displacement + horsepower + weight + acceleration + year, data = Auto)
square = glm(mpg ~ poly(acceleration, 2, raw = TRUE) + poly(horsepower, 2, raw = TRUE) + poly(weight, 2, raw = TRUE) + poly(year, 2, raw = TRUE), data = Auto)
cv.glm(Auto, linear)$delta[1]
cv.glm(Auto, square)$delta[1]
plot(Auto$weight, Auto$mpg)
ordering = order(Auto$weight)
lines(weight[ordering], predict(linear)[ordering], col = red)
lines(Auto$weight[ordering], predict(linear)[ordering], col = red)
lines(Auto$weight[ordering], predict(linear)[ordering], col = "red")
lines(Auto$weight[ordering], predict(linear)[ordering], col = "red", type = "l")
plot(Auto$weight, Auto$mpg)
ordering = order(Auto$weight)
lines(Auto$weight[ordering], predict(linear)[ordering], col = "red", type = "l")
lines(Auto$weight[ordering], predict(square)[ordering], col = "blue")
linear = glm(mpg ~  weight , data = Auto)
square = glm(mpg ~  poly(weight, 2, raw = TRUE), data = Auto)
cv.glm(Auto, linear)$delta[1]
cv.glm(Auto, square)$delta[1]
plot(Auto$weight, Auto$mpg)
ordering = order(Auto$weight)
lines(Auto$weight[ordering], predict(linear)[ordering], col = "red")
lines(Auto$weight[ordering], predict(square)[ordering], col = "blue")
data(reuters)
source('~/Documents/Stanford/JunFall/cs229/project/cs229/naive_svm.R', echo=TRUE)
